{
  "title": "スクラムめも",
  "closed": false,
  "archived": false,
  "created_at": "2021-01-25",
  "comments": [
    {
      "author": "ulwlu",
      "created_at": "2021-01-25",
      "body_updated_at": "2021-01-25",
      "body_markdown": "**経緯**：マネジメントの知識を復習したいという気持ちを抱いた。\n\n**概要**：アジャイル開発方法論を実現する開発FWのうち、スクラムが最も有名。アジャイル開発方法論とは何か、スクラムは何故普及して他と何が違うのかを記述する。\n\n**単語**：\n- **アジャイル開発方法論**: 一般的にアジャイルと言われる物。1〜4週間の短い反復を使用して頻繁にフィードバックを行い(Review and Adjust)、ソフトウェアを段階的に構築する(Define, Code, Test)、ソフトウェア開発方法論。\n- **アジャイルマニフェストの12の原則**: アジャイルを作った人達が定義した「ソフトウェア開発における思想」。これを元にアジャイル開発方法論はつくられた。\n  - **Customer Satisfaction**: Customerの要件を満たす事が最優先事項\n  - **Welcome Change**: 開発フェーズの後半であっても絶えず要件変化は行われるべき(顧客競争の優位性を高めるために、アジャイルプロセスがある)\n  - **Deliver a Working Software**: 数週間から数ヶ月の範囲で動作保証されたソフトウェアを頻繁に提供する\n  - **Collaboration**: ビジネスマンと開発者は常に協力する必要がある\n  - **Motivation**: リーダーは、チームメンバーが仕事の遂行責任を感じられるように環境を提供する\n  - **Face-to-face Conversation**: 対面での会話が最も情報伝達に効果的な方法\n  - **Measure the Progress as per the Working Software**: ソフトウェアが動作するかどうかだけが進捗の尺度\n  - **Maintain Constant Pace**: アジャイルプロセスはスピードだけでなく持続可能性も大事であり、一定のペースを維持しなければならない\n  - **Monitoring**: ソフトウェアの動作保証のため、技術劣化や設計不備が発生しないように注視しなければならない\n  - **Simplicity**: 単純な用語を使用して、測定監査しなければならない\n  - **Self-organized Teams**: アジャイルは自己組織化しなければならなく、他チームに依存してはならない\n  - **Review the Work Regularly**: より効率的かつ俊敏に調整できるよう、定期的に作業確認する\n- **スクラム**: アジャイル開発方法論の一つのフレームワーク。アジャイルの欠点である「最初の決定的な方向性の欠如」を補うプロジェクト管理システムが特徴。具体的には、「全体タスクをプロダクトバックログとしてまとめ(要件定義&設計)」、「アジャイルの1スプリントの中で実装すべきスプリント目標を選び、スプリントバックログ作成(要件定義&設計&開発) → デイリースクラム(MTG)を毎日行い進捗確認&情報共有」するので手戻りが少なく、かつチームの方向性が見えやすくなる。スプリントの最後にはレビューとグルーミング(スプリントレトロスペクティブともいう)を行ってより次のスプリントに活かす。\n- **スクラムイベント**: スクラムを形成する期間の定義。スプリント計画、スプリント、デイリースクラム、スプリントレビューがこれにあたる。\n- **スクラムロール**: スクラム上の役割。スクラムマスターやプロダクトオーナーがこれにあたる。\n- **スクラムアーティファクト**: アジャイルチームが知るべき情報。プロダクトバックログ、スプリントバックログ、スプリントチャート、インクリメントがこれにあたる。\n- **[比較]シングルパス開発**: すべての要件とリスクを事前に決める、6-18ヶ月スパンで、一度だけ要件定義→設計→実装→テストを行う開発手法。これが最もレガシーな会社だと一般的。\n- **[比較]ウォーターフォール開発**: シングルパス開発と同義。よく「トップダウンとウォーターフォールは同じ」という認識が流布されているが違う。「一度工程が先に進んだら基本的に要件変更に対応できない」システムを示す。\n- **[比較]動的システム開発方法論(DSDM)**: アジャイル開発方法論の一つのフレームワーク。DSDMAternとかある。予算と期日を重視するもので、今回は説明省くがそんなに普及してない。\n- **[比較]リーン開発方法論**: アジャイル開発と組み合わせる事を良しとされている方法論で、異なる軸にある方法論ではない。リーン開発は「いかに起業を成功させるか→必要最小限の商品(MVP)をリリース→商品の満足度を重視して素早い改善を行う」ことで、アジャイル開発は「素早い製品提供を継続的に行う」こと。組み合わせる場合はユーザーストーリーを深堀りしてスプリントを組まなければいけない。\n- **Cross Functional Team(アジャイルチーム)**: アジャイルチームはCross Functionalでなければいけず、3-4人の開発者、1人のテスター、1人のテックリード、1人のプロダクトオーナー、1人のスクラムマスターで構成される。\n- **スクラムマスター**: アジャイルチームのリーダー。役割は、スクラムのイベント(デイリースクラムとか)/ロールを浸透させる事。具体的には「イベントのファシリ/ツール導入/監視/アジャイルの妨害を防ぐ(営業やクライアントからの横槍とか)」で、あくまでコーチング的な役目であり人事評価や品質保証には本来全く責任を負わない。「スクラムを浸透させるために、会社のルールを打破する事」も役目にある(打破するためのバックログをImpediment Backlogという)。\n- **プロダクトオーナー**: アジャイルチーム&スクラムマスターのリーダー。スクラムマスターがチームリーダーならば、プロダクトオーナーはPMである。役割は品質価値の最大化とチームワークの最大化。スクラムマスターと決定的に違うのは「スクラムマスターはスプリントバックログを管理するが、プロダクトオーナーはプロダクトバックログを管理する」点。ほとんどの場合スケジュール管理とメンバー調整が役目。\n- **ステークホルダー**: チーム以外の人。何かしらのフィードバックをくれる役割があるが、絶対くれるとは言ってない。\n- **デイリースクラム**: 毎日15分行う情報共有の場。「毎日同じ時間に、同じ場所で行う」事がルール。「スプリントバックログの為に彼は、昨日何をしましたか？今日は何をしますか？何か障害がありますか？」の３点を共有する。これは「ステータス確認ではなく、目標計画である」事を意識する。\n- **イテレーション(アジャイル用語)/スプリント(スクラム用語)**: 開発期間(Define/Code/Test)。通常2週間か1ヶ月で組まれる。\n- **ユーザーストーリー/スプリントバックログ**: その開発期間で実装すべき計画。「ユーザーに何をさせたいか？何を提供する必要があるか？その実行に必要な作業は何か？その作業はどのように達成されるか？」を決定する。プロダクトバックログから通常切り取ってくる。\n- **スプリントバーンダウンチャート**: スプリントの進捗を可視化し、課題発見のきっかけにするためのチャート。横軸にスプリントの日数、縦軸にスプリントバックログの残り作業の見積もり時間の合計を毎日書いていく。収束しなさそうと思ったら早めにフィードバックできる。\n- **XP(エクストリームプログラミング)**: スプリントを実行する時に、実行者のベストプラクティスをまとめたもの。具体的にはペアプログラミング、テスト駆動開発、CICD、カンバンシステムとかがこれにあたる。"
    },
    {
      "author": "ulwlu",
      "created_at": "2021-01-25",
      "body_markdown": "スクラム開発は「アジャイルという開発方法論にスクラムというFWをあてこんだ流れ」を一般的にいうため、以降はスクラム開発と総称する"
    },
    {
      "author": "ulwlu",
      "created_at": "2021-01-25",
      "body_updated_at": "2021-01-25",
      "body_markdown": "# スクラム開発の全体図\n[Ryuzee氏のブログ](https://www.ryuzee.com/contents/blog/7137)から転用。一番わかりやすい図だと思います。\n\n![](https://storage.googleapis.com/zenn-user-upload/4lleroqtux4lry3g4928qonqp7hk)\n\n- リリース計画\n  - Opening Ceremony: 計画開始。目的の紹介。\n  - Product Vision. Roadmap: 製品の全体像を示す。\n  - Review previous releases: 前回リリースのレビューを行い、今回の計画への影響を話し合う\n  - Velocity: 前回リリースと今回リリースの速度比較を提示。速度の事をストーリーポイント、チームのタスク能力をキャパシティとよび、過去のストーリーポイントが12,10,14だったら今回は平均の12になる。\n  - Release Schedule: リリースのマイルストーンを決定する\n  - Issues and Concerns: 懸念事項や問題を確認する\n  - Review and Update the definition of Done: 何をもって完了とするか定義する。\n  - Stories and items to be considered: プロダクトバックログのユーザーストーリーと機能(ユーザーに何をしてほしいか)を提示する\n  - Determine sizing values: バックログのサイズを決定する。サイズに合わせてスプリントバックログにあてこんでいく\n  - Coarse the size of stories: 開発メンバーはユーザーストーリが過大すぎる場合は複数スプリントに分ける。それに対してプロダクトオーナーは質問を投げて疑問を晴らす。このやりとりをスクラムマスターは仲介してcollaborationを促進する。\n  - Map stories to iterations: プロダクトバックログをスプリントバックログに分ける\n  - New concerns or issues: 再度懸念点等がないかを確認する\n- スプリント開始\n- デイリースクラム\n  - スプリントバックログの実現のために、昨日何をしたか？\n  - スプリントバックログの実現のために、今日は何をするか？\n  - スプリントバックログの実現のために、何か障害はあるか？ \n- ユーザーストーリー\n  - 全てのユニットテストケースが成功したか\n  - 全てのヘルプテキストが記載されたか\n  - **プロダクトオーナーが承認したか**\n- スプリント終了\n- リリース\n  - Retrospect: スプリントレビューを行う。\n  - Close: おわり"
    },
    {
      "author": "ulwlu",
      "created_at": "2021-01-26",
      "body_markdown": "おわり。\nまとめて感じたが、言葉面しか理解できてないと感じた。何も知らずJIRAを触るとあまりにもわかりづらいが、この理論のもとでJIRAを見ると「なるほど、スクラムしやすいな」と感じる（てかJIRAにバーンダウンチャートが用意されてるのすら知らなかった）。\n\n# 参照\n\nhttps://www.ryuzee.com/\n\nhttps://www.scrum.org/resources/what-is-scrum\n"
    }
  ]
}